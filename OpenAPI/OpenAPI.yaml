openapi: 3.0.3
info:
  description: |-
    Each user will be presented with a stream of photos in reverse chronological order, with information
    about when it was uploaded (date and time) and how many likes and comments it has. Users can place
    (and later remove) a “like” to photos from other users. Also, users can add comments to any photo
    (even those uploaded by themself). Comments can be removed by the author only.

    Users can ban other users. If Alice (user) bans Eve (user), Eve won’t be able to see any information
    about Alice. Alice can decide to remove the ban at any moment.

    Users will have their own personal profiles. The personal profile page for user detail: user’s photos (in
    reverse chronological order), their followers and following, and how many photos have been uploaded.
    Each user can change his/her own username, upload photos, remove photos, and follow/unfollow
    other users. Removal of a photo will also remove likes and comments.

    Users profiles can be searched via username.

    The login is perfomed by specifying the username.
  title: WASAPhoto API
  version: 1.0.0
  contact:
    name: Lucian Dorin Crainic
    email: crainic.1938430@studenti.uniroma1.it
    url: https://github.com/LucianCrainic
  license:
    name: MIT
paths:
  /session/:
    #* doLogin
    post:
      tags: ["Login action"]
      summary: Logs in the user.
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content: 
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user"}
  /session/{Id}/username/:
    parameters:
      - $ref : "#/components/parameters/Id"
    #* setMyUserName
    put: 
      tags: ["Session User actions"]
      summary: Sets user username.
      description: |-
        Set user username, if the user is logged in then the username is set with the username
        in the request body.
      operationId: setMyUserName
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/user"}
      responses:
        "201":
          description: Username set successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user"}
        "404":
          description: User not found.
  /session/{Id}/stream/:
    parameters:
      - $ref : "#/components/parameters/Id"
    #* getMyStream
    get:
      tags: ["Session User actions"]
      summary: Returns user Stream.
      description: |-
        Return a list of photos for the user stream.
        If the client specifies a range for when the photos were uploaded,
        the list will be sorted by date from that point and filtered.
        Optionally, the client can specify a custom quantity of photos to be displayed.
      operationId: getMyStream
      parameters:
        - name: range
          in: query
          description: |-
            Range for when the photos were uploaded.
            Default: Today
          schema:
            type: string
            enum: ["Today","Yesterday", "Last week"]
            example: "Today"
        - name: quantity
          in: query
          required: false
          description: |-
            Quantity of photos to be displayed. 
            Default: 10.
          schema:
            type: number
            format: float
            example: 15
            minimum: 1
            maximum: 50
      responses:
        "200": 
          description: List of photos.
          content:
            image/*:
              schema: 
                type: array
                items: { $ref: "#/components/schemas/photo"}
        "400":
          description: User not found.
  /session/{Id}/profile/user/{userId}: 
    parameters:
      - $ref: "#/components/parameters/Id"
      - $ref: "#/components/parameters/userId"
    #* getUserProfile
    get:
      tags: ["User actions"]
      summary: Returns user profile.
      operationId: getUserProfile
      description: |-
        Return the user profile of a userId provided by the current logged in userId. 
        If the userId exists then the profile of the user is returned. a user not found
        error is given if the userId does not exist.
      responses:
        "200": 
          description: User profile retrived.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user"}
        "400":
          description: User not found.
  /session/{Id}/ban/user/{userId}:
    parameters: 
      - $ref: "#/components/parameters/Id"
      - $ref: "#/components/parameters/userId"
    #* banUser
    put: 
      tags: ["User Ban actions"]
      summary: Ban an user.
      description: |-
       Ban an user, if the userId provided by the current logged in user exist. If the userId 
       does not exist then a user not found response is given.
      operationId: banUser
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/user"}
      responses:
        "200": 
          description: User banned successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user"}
        "404":
          description: User not found.
    #* unbanUser
    delete: 
      tags: ["User Ban actions"]
      summary: Unban an user.
      description: |-
        Unban an user, if the userId provided by the current logged in user
         exist. If the userId does not exist then a user not found response is given.
      operationId: unbanUser

      responses:
        "200": 
          description: User Unbanned successfully.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/user"}
        "404":
          description: User not found.
  /session/{Id}/follow/user/{userId}:
    parameters: 
    - $ref: "#/components/parameters/Id"
    - $ref: "#/components/parameters/userId"
    #* followUser
    put: 
      tags: ["User Follow actions"]
      summary: Follow an user.
      description: |-
        Folow an user, if the userId provided by the current logged in user exist. If the userId does not exist then a user not found response is given.
      operationId: followUser
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/user"}
      responses:
        "200": 
          description: User followed successfully.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/user"}
        "404":
          description: User not found.    
    #* unfollowUser
    delete: 
      tags: ["User Follow actions"]
      summary: Unfollow an user.
      description: |-
       Unfollow an user, if the userId provided by the current logged in user exist. If the userId does not exist then a user not found response is given.
      operationId: unfollowUser
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/user"}
      responses:
        "200": 
          description: User Unfollowed successfully.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/user"}
        "404":
          description: User not found.
  /session/{Id}/photo/:
    parameters:
      - $ref : "#/components/parameters/Id"
    #* uploadPhoto
    post: 
      tags: ["Photo actions"]
      summary: Upload a photo.
      description: |-
        Upload a photo, if the photo has the right format then it is uploaded on the user profile. If the file
        format is not correct, then an error response is given.
      operationId: uploadPhoto
      requestBody:
        content:
          image/*:
            schema: { $ref: "#/components/schemas/photo" }
      responses:
        "200":
          description: Photo uploaded successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/photo" }
        "404":
          description: Image format is not correct.
  /session/{Id}/photo/{photoId}:
    parameters:
      - $ref : "#/components/parameters/Id"
      - $ref : "#/components/parameters/photoID"
    #* deletePhoto 
    delete:
      tags: ["Photo actions"]
      operationId: deletePhoto
      summary: Remove a photo.
      description: |-
       Delete a photo from a user profile. If the photoId is correct then the photo is removed, an 
       error response is given if the photoId is not found.
      responses:
        "200": {description: Photo deleted successfully.}
        "404": {description: Photo not found.}
  /session/{Id}/user/{userId}/photo/{photoId}/like/:
    parameters:
      - $ref : "#/components/parameters/Id"
      - $ref : "#/components/parameters/userId"
      - $ref : "#/components/parameters/photoID"
    #* likePhoto
    put: 
      tags: ["Photo actions"]
      operationId: likePhoto
      summary: Like a photo.
      description: |-
        Add a like from a specific photo, is the photoid and the userid provided by the 
        current logged in user are correct then the like is added. If either one of the IDs
        are not correct then a photo not found error response is given.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/photo" }
      responses:
        "201":
          description: Like added successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/photo"}
        "404": {description: Photo not found.}  
    #* unlikePhoto
    delete: 
      tags: ["Photo actions"]
      operationId: unlikePhoto
      summary: Delete a like from a photo.
      description: |-
        Remove a like from a specific photo, is the photoid and the userid provided by the 
        current logged in user are correct then the like is removed. If either one of the IDs
        are not correct then a photo not found error response is given.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/photo" }
      responses:
        "201":
          description: Like added successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/photo"}
        "404": {description: Photo not found.}
  /session/{Id}/user/{userId}/photo/{photoId}/comment/:
    parameters:
      - $ref : "#/components/parameters/Id"
      - $ref : "#/components/parameters/userId"
      - $ref : "#/components/parameters/photoID"
    #* commentPhoto
    post:
      tags: ["Comment actions"]
      summary: Add a comment under a Photo.
      operationId: commentPhoto
      description: |-
       Add a comment under a Photo, if the userID and photoID are correct
       then the comment in the request body is added under the photo. If 
       either one of the IDs are wrong then a photo not found response is given.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/comment"}
      responses:
        "200":
          description:  Comment added successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/comment"}
        "404": 
          description: Photo not found.
  /session/{Id}/user/{userId}/photo/{photoId}/comment/{commentId}:
    parameters:
      - $ref : "#/components/parameters/Id"
      - $ref : "#/components/parameters/userId"
      - $ref : "#/components/parameters/photoID"
      - $ref: "#/components/parameters/commentID"
    #* uncommentPhoto
    delete:
     tags: ["Comment actions"]
     operationId: uncommentPhoto
     summary: Remove a comment under a Photo.
     description: |-
       Delete a comment under a photo. If the userID,photoID and commentID 
       are correct then the photo is removed, if one of the 3 IDs are wrong 
       then a comment not found response error is given.
     responses:
       "204": {description: Comment removed successfully.}
       "404": {description: Comment not found.}
components:
  schemas:
    #* User schema
    user:
      title: User Schema
      description: This object represent a single User
      type: object
      properties:
        id:
          description: Unique user identifier
          type: string
          readOnly: true
          example: "#U6789"
        username:
          description: User username
          type: string
          example: Lucian Crainic
        followList: 
          description: to does
          type: array
          items:
            type: string
            description: ID of Users
            example: "#U1234" 
        banList: 
          description: to does
          type: array
          items:
            type: string
            description: ID of Users
            example: "#U1234"
        followersCount:
          description: Number of followers.
          type: integer
          readOnly: true
          example: 1420

        photoCount:
          description: Number of photos published.
          type: integer
          readOnly: true
          example: 80
        createDate:
          description: Upload date of a specific Photo.
          type: string
          example: "2022-11-02T09:00:00Z"
          readOnly: true
    #* Photo schema
    photo: 
      title: Photo Schema
      description: "This object represent a singe photo"
      type: object
      properties:
        photoId: 
          description:  Unique photo identifier
          type: string
          example: "#P1234"
          readOnly: true   
        likesCount:
          description: Number of likes.
          type: integer
          example: 15
          minimum: 0
          maximum : 9999999
        commentsCount:
          description: Number of comments.
          type: integer
          example: 20
          minimum: 0
          maximum : 9999999
        uploadDate:
          description: Upload date of a specific Photo.
          type: string
          example: "2022-11-02T09:00:00Z"
          readOnly: true
    #* Comment Schema
    comment: 
      title: Comment Schema
      description: This object represent a single comment
      type: object
      properties:
        commentId:
          description: Unique comment identifier
          type: string
          readOnly: true 
          example: "#C1234"
        content:
          description: Content of the comment
          type: string
          example: "Hello World!"
        commentLikeCount:
          description: Count likes of a comments.
          type: integer
          example: 20
          minimum: 0
          maximum : 9999999
        uploadDate:
          description: Upload date of a specific Photo.
          type: string
          example: "2022-11-02T09:00:00Z"
          readOnly: true
  parameters:
    Id:
      schema:
        type: string
        example: "#U12345"
        readOnly: true
      name: Id
      in: path
      required: true
      description: "**ID** of the current user that is logged in WASAPhoto."
    userId:
      schema:
         type: string
         example: "abcdef012345"
      name: userId
      in: path
      required: true
      description: "**userID** that identifies a specific user of WASAPhoto."
    photoID:
      schema:
        type: string
        example: "#P1234"
        readOnly: true
      name: photoId 
      in: path
      required: true
      description: "**photoID** of a specific photo on a user profile."
    commentID:
      schema:
        type: string
        example: "#C1234"
        readOnly: true
      name: commentId
      in: path
      required: true
      description: "**commentID** of a single comment under a photo."

#TODO profileDescription
#TODO profilePicture
#TODO commentLike
#TODO addPhotoDescription
#TODO removeDescription    

#! Check schemas
#! Methods Descriptions
#! Methods Request and Response body 
#! Methods Responses

#? Implemen the get user profile method like => Query if you want to
#? return user profile/followers/photos/followings...