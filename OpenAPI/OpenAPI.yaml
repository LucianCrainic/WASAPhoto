openapi: 3.0.3
info:
  description: |-
    Each user will be presented with a stream of photos in reverse chronological order, with information
    about when it was uploaded (date and time) and how many likes and comments it has. Users can place
    (and later remove) a “like” to photos from other users. Also, users can add comments to any photo
    (even those uploaded by themself). Comments can be removed by the author only.

    Users can ban other users. If Alice (user) bans Eve (user), Eve won’t be able to see any information
    about Alice. Alice can decide to remove the ban at any moment.

    Users will have their own personal profiles. The personal profile page for user detail: user’s photos (in
    reverse chronological order), their followers and following, and how many photos have been uploaded.
    Each user can change his/her own username, upload photos, remove photos, and follow/unfollow
    other users. Removal of a photo will also remove likes and comments.

    Users profiles can be searched via username.

    The login is perfomed by specifying the username.
  title: WASAPhoto API
  version: 1.0.0
  contact:
    name: Lucian Dorin Crainic
    email: crainic.1938430@studenti.uniroma1.it
    url: https://github.com/LucianCrainic
  license:
    name: MIT

paths:
  /session/:
    #* doLogin
    post:
      tags: ["Login action"]
      summary: Logs in the user.
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content: 
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user"}
  
  /session/{Id}:
    parameters:
      - $ref : "#/components/parameters/Id"
    #! setMyUserName
    post: 
      tags: ["Session User actions"]
      summary: Sets user username.
      description: TODO
      operationId: setMyUserName
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/username"}
      responses:
        "201":
          description: Username updated successfully.
          content: 
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Maria
                    pattern: '^.*?$'
                    minLength: 3
                    maxLength: 16

    #! getMyStream
    get:
      tags: ["Session User actions"]
      summary: Returns user Stream.
      operationId: getMyStream
      responses:
        "200": 
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user"}
        "400":
          description: User not found
  /session/{Id}/{userId}: 
    #! getUserProfile
    get:
      tags: ["User actions"]
      summary: Returns user profile
      operationId: getUserProfile
      responses:
        "200": 
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user"}
        "400":
          description: User not found
  /session/{Id}/{userId}/ban:
    parameters: 
      - $ref: "#/components/parameters/Id"
      - $ref: "#/components/parameters/userId"
    #* banUser
    post: 
      tags: ["User Ban actions"]
      summary: Ban an user.
      description: |-
        ## Information
        - If the **userId** provided by the **user(Id)** exists then banStatus is 
        changed from "None" to "Ban". 
        - If the **usedId** provided by the **user(Id)** does not exist then a 404 error
        response is given.
      operationId: banUser
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/user"}
      responses:
        "200": 
          description: User banned successfully.
        "404":
          description: User not found.
    #? unbanUser
    put: 
      tags: ["User Ban actions"]
      summary: Unban an user.
      description: |-
        ## Information
        - If the **userId** provided by the **user(Id)** exists then banStatus is 
        changed from "Ban" to "None". 
        - If the **usedId** provided by the **user(Id)** does not exist then a 404 error
        response is given.
      operationId: banUser
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/user"}
      responses:
        "200": 
          description: User Unbanned successfully.
        "404":
          description: User not found.
  /session/{Id}/{UserId}/follow:
    #! followUser
    post: 
      tags: ["User Follow actions"]
      summary: Follow an User.
      description: TODO
      operationId: banUser
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/user"}
      responses:
        "200": 
          description: User banned successfully.
        "404":
          description: User not found.
    #! unfollowUser
    put: 
      tags: ["User Follow actions"]
      summary: Unfollow a User.
      description: TODO
      operationId: uploadPhoto
      requestBody:
        content:
          image/png:
            schema: { $ref: "#/components/schemas/photo" }
      responses:
        "200":
          description: Photo uploaded successfully.
        "404":
          description: format not correct.
  /session/{Id}/photo:
    parameters:
      - $ref : "#/components/parameters/Id"
    #! uploadPhoto
    put: 
      tags: ["Photo actions"]
      summary: Upload a photo.
      description: TODO
      operationId: uploadPhoto
      requestBody:
        content:
          image/png:
            schema: { $ref: "#/components/schemas/photo" }
      responses:
        "200":
          description: Photo uploaded successfully.
        "404":
          description: format not correct.
  /session/{Id}/photo/{photoId}:
    parameters:
      - $ref : "#/components/parameters/Id"
      - $ref : "#/components/parameters/photoID"
    #* likePhoto
    post: 
      tags: ["Photo actions"]
      operationId: likePhoto
      summary: Like a photo.
      description: Like a photo from a user.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/photo" }
      responses:
        "201":
          description: Like added successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/photo"}
        "404": {description: Photo not found.}

    #* unlikePhoto
    put: 
      tags: ["Photo actions"]
      operationId: unlikePhoto
      summary: Unlike a photo.
      description: Unlike a photo from a user.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/photo" }
      responses:
        "201":
          description: Like added successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/photo"}
        "404": {description: Photo not found.}
    #* deletePhoto 
    delete:
      tags: ["Photo actions"]
      operationId: deletePhoto
      summary: Delete a photo.
      description: Delete a photo from the system.
      responses:
        "204": {description: Photo deleted successfully.}
        "404": {description: Photo not found}
  
  /session/{Id}/photo/{photoId}/comment:
    parameters:
      - $ref : "#/components/parameters/Id"
      - $ref : "#/components/parameters/photoID"
      - $ref: "#/components/parameters/commentID"
    #* commentPhoto
    put:
      tags: ["Comment actions"]
      summary: Add a comment under a Photo.
      description: TODO
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/comment"}
      responses:
        "200":
          description:  Comment added successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/comment"}
        "404": {description: Comment not found}
  /session/{Id}/photo/{photoId}/comment/{commentId}:
    parameters:
      - $ref : "#/components/parameters/Id"
      - $ref : "#/components/parameters/photoID"
      - $ref: "#/components/parameters/commentID"
    #* uncommentPhoto
    delete:
     operationId: uncommentPhoto
     tags: ["Comment actions"]
     summary: Uncomment a Photo.
     description: TODO
     responses:
       "204": {description: Comment removed successfully.}
       "404": {description: Comment not found}
components:
  schemas:
    #* User schema
    user:
      title: User Schema
      description: This object represent a single User
      type: object
      properties:
        id:
          description: Unique user identifier
          type: integer
          readOnly: true
          example: user123
        followStatus:
          description: Describe the follow status of the user
          type: string
          enum: ["Follow", "Unfollow"]
          example: Unfollow
        banStatus:
          description: Describe the ban status of the user
          type: string
          enum: ["Ban","Unban"]
          example: Unban
        followerStatus:
          description: Number of followers.
          type: integer
          readOnly: true
          example: 1420
        followingStatus:
          description: Number of followings.
          type: integer
          readOnly: true
          example: 820
        photoStatus:
          description: Number of photos published.
          type: integer
          readOnly: true
          example: 80
    #* Username schema
    username:
      title: Username Schema
      description: User username
      type: string
      example: "Lucian"
    #* Photo schema
    photo: 
      title: Photo Schema
      description: "This object represent a singe photo"
      type: object
      properties:
        id: 
          description:  Unique photo identifier
          type: integer
          readOnly: true   
        likeCount:
          description: Number of likes.
          type: integer
          example: 15
          minimum: 0
          maximum : 9999999
        commentsCount:
          description: Number of comments.
          type: integer
          example: 20
          minimum: 0
          maximum : 9999999
    #* Comment Schema
    comment: 
      title: Comment Schema
      description: This object represent a single comment
      type: object
      properties:
        id:
          description: Unique comment identifier
          type: integer
          readOnly: true 
        content:
          description: Content of the comment
          type: string
          example: "Hello World!"
  parameters:
    Id:
      schema:
        type: string
        example: "abcdef012345"
        readOnly: true
      name: Id
      in: path
      required: true
      description: "**ID** of the current user that is logged in WASAPhoto."
    userId:
      schema:
         type: string
         example: "abcdef012345"
      name: userId
      in: path
      required: true
      description: "**userID** that identifies a specific user of WASAPhoto"
    photoID:
      schema:
        type: integer
        example: 1
        readOnly: true
      name: photoId
      in: path
      required: true
      description: photoID
    commentID:
      schema:
        type: integer
        example: 1
        readOnly: true
      name: commentId
      in: path
      required: true
      description: commentID