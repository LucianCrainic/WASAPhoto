openapi: 3.0.3
info:
  description: |-
    Each user will be presented with a stream of photos in reverse chronological order, with information
    about when it was uploaded (date and time) and how many likes and comments it has. Users can place
    (and later remove) a “like” to photos from other users. Also, users can add comments to any photo
    (even those uploaded by themself). Comments can be removed by the author only.

    Users can ban other users. If Alice (user) bans Eve (user), Eve won’t be able to see any information
    about Alice. Alice can decide to remove the ban at any moment.

    Users will have their own personal profiles. The personal profile page for user detail: user’s photos (in
    reverse chronological order), their followers and following, and how many photos have been uploaded.
    Each user can change his/her own username, upload photos, remove photos, and follow/unfollow
    other users. Removal of a photo will also remove likes and comments.

    Users profiles can be searched via username.

    The login is perfomed by specifying the username.
  title: WASAPhoto API
  version: 1.0.0
  contact:
    name: Lucian Dorin Crainic
    email: crainic.1938430@studenti.uniroma1.it
    url: https://github.com/LucianCrainic
  license:
    name: MIT
paths:
  /session/:
    #* doLogin
    post:
      tags: ["Login action"]
      summary: Log in user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content: 
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: string
                  example: Lucian
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                properties:
                  identifier:
                    type: string
                    example: "#U1234"
  /setUsername/{username}:
    parameters: 
      - $ref: "#/components/parameters/username"
    #* setMyUserName
    put: 
      security:
      - bearerAuth : []
      - {} #nosec
      tags: ["Session User actions"]
      summary: Set user username
      description: |-
        Set user username, if the user is logged in then the username is set with the username
        in the request body.
      operationId: setMyUserName
      requestBody:
        description: User username
        content: 
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: LucianCrainic
                  minLength: 5
                  maxLength: 30
        required: true
      responses:
        "201":
          description: Username set successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /stream/{username}:
    parameters:
      - $ref : "#/components/parameters/username"
    #* getMyStream
    get:
      security:
      - {} #nosec
      - bearerAuth : []
      tags: ["Session User actions"]
      summary: Return user stream
      description: |-
        Return a list of photos for the user stream.
        If the client specifies a range for when the photos were uploaded,
        the list will be sorted by date from that point and filtered.
        Optionally, the client can specify a custom quantity of photos to be displayed.
      operationId: getMyStream
      parameters:
        - name: range
          in: query
          description: |-
            **Range** for when the photos were uploaded.
            Default: Today
          schema:
            type: string
            enum: ["Today","Yesterday", "Last week"]
            example: "Today"
        - name: quantity
          in: query
          required: false
          description: |-
            **Quantity** of photos to be displayed. 
            Default: 10.
          schema:
            type: number
            format: float
            example: 15
            minimum: 1
            maximum: 50
      responses:
        "200": 
          description: User stream retrived successfully.
          content:
            image/*:
              schema: 
                type: array
                items: { $ref: "#/components/schemas/photosList"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profile/{username}:
    parameters: 
      - $ref: "#/components/parameters/username"
    #* getUserProfile
    get:
      security:
      - {} #nosec
      - bearerAuth : []
      tags: ["User actions"]
      summary: Return user profile
      operationId: getUserProfile
      description: |-
        Return an user profile, if the username provided exists. If the username does not exist then an error response is given.
      responses:
        "200": 
          description: User profile retrived.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /ban/{username}:
    parameters: 
      - $ref: "#/components/parameters/username"
    #* banUser
    post: 
      security:
      - {} #nosec
      - bearerAuth : []
      tags: ["User Ban actions"]
      summary: Ban user
      description: |-
       Ban an user, if the username provided exists. If the username does not exist then an error response is given.
      operationId: banUser
      responses:
        "200": 
          description: User banned successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/banList"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    #* getBans
    get:
      security:
      - {} #nosec
      - bearerAuth : []
      tags: ["User Ban actions"]
      summary: Return user bans
      operationId: getBans
      description: |-
        Return a list of banned users, if the username exists then a list of banned usernames is returned. If the username does not exist then an error response is given.
      responses:
        "200": 
          description: User bans retrived successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/banList"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    #* unbanUser
    delete: 
      security:
      - {} #nosec
      - bearerAuth : []
      tags: ["User Ban actions"]
      summary: Unban user
      description: |-
        Unban an user, if the username provided exists. If the username does not exist then an error response is given.
      operationId: unbanUser

      responses:
       "200": {description: Ban removed successfully.}
       "400": { $ref: "#/components/responses/BadRequest" }
       "401": { $ref: "#/components/responses/UnauthorizedError" }
       "500": { $ref: "#/components/responses/InternalServerError" }
  /follow/{username}:
    parameters:
      - $ref: "#/components/parameters/username"
    #* followUser
    post: 
      security:
      - {} #nosec
      - bearerAuth : []
      tags: ["User Follow actions"]
      summary: Follow user
      description: |-
        Folow an user, if the username provided exists. If the username does not exist then an error response is given.
      operationId: followUser
      responses:
        "200": 
          description: User followed successfully.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/followList"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    #* getFollowers
    get:
      security:
      - {} #nosec
      - bearerAuth : []
      tags: ["User Follow actions"]
      summary: Return user followers
      operationId: getFolowers
      description: |-
        Return a list of followers of a specific user, if the username exists then the list that contains all the followers. If the username does not exist then an error response is given.
      responses:
        "200": 
          description: User followers retrived successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/followList"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    #* unfollowUser
    delete: 
      security:
      - {} #nosec
      - bearerAuth : []
      tags: ["User Follow actions"]
      summary: Unfollow user
      description: |-
       Unfollow an user, if the username provided exists. If the username does not exist then an error response is given.
      operationId: unfollowUser
      responses:
       "200": {description: Follow removed successfully.}
       "400": { $ref: "#/components/responses/BadRequest" }
       "401": { $ref: "#/components/responses/UnauthorizedError" }
       "500": { $ref: "#/components/responses/InternalServerError" }
  /photo/:
    #* uploadPhoto
    post: 
      security:
      - bearerAuth : []
      tags: ["Photo actions"]
      summary: Upload photo
      description: |-
        Upload a photo, if the photo has the right format then it is uploaded on the user profile. If the file
        format is not correct, then an error response is given.
      operationId: uploadPhoto
      requestBody:
        required: true
        content:
          image/*:
            schema:
              type: object
              properties:
                 file: 
                  type: string
                  format: binary
                  readOnly: true

      responses:
        "201":
          description: Photo uploaded successfully.
          content:
            application/json:
              schema:
                properties:
                  identifier:
                    type: string
                    example: "#P1234"
                  file: 
                    type: string
                    format: binary
                    readOnly: true
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /photo/{username}:
    parameters:
      - $ref: "#/components/parameters/username"
    #* getUserPhotos
    get:
      security:
      - {} #nosec
      - bearerAuth : []      
      tags: ["Photo actions"]
      summary: Return user photos
      operationId: getUserPhotos
      description: |-
        Return an user photos, if the username provided exists. If the username does not exist then an error response is given.
      responses:
        "200": 
          description: User photos retrived.
          content:
            image/*:
              schema: { $ref: "#/components/schemas/photosList"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /photo/{photoId}:
    parameters:
      - $ref : "#/components/parameters/photoID"
    #* deletePhoto
    delete:
      security:
      - {} #nosec
      - bearerAuth : []
      tags: ["Photo actions"]
      operationId: deletePhoto
      summary: Remove photo
      description: |-
       Delete a photo from a user profile. If the photoId is correct then the photo is removed, an 
       error response is given if the photoId is not correct.
      responses:
        "200": {description: Photo deleted successfully.}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /like/{photoId}:
    parameters:
      - $ref : "#/components/parameters/photoID"
    #* likePhoto
    post: 
      security:
      - {} #nosec
      - bearerAuth : []
      tags: ["Like actions"]
      operationId: likePhoto
      summary: Like photo
      description: |-
        Add a like to a specific photo, is the photoId is correct then a like is added. If the photoId
        is not correct then an error response is given.
      responses:
        "200":
          description: Like added successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/likesList"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    #* getLikes
    get:
      security:
      - {} #nosec
      - bearerAuth : []
      tags: ["Like actions"]
      summary: Return photo likes
      description: |-
        Return a list of likes to a specific photo. If the photoId is correct then the list is returned, it contains the identifiers of
        users that liked the picture. An error message is given if the Id is not correct.
      operationId: getLikes
      responses:
        "200": 
          description: Photo likes retrived successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/likesList"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    #* unlikePhoto
    delete: 
      security:
      - {} #nosec
      - bearerAuth : []
      tags: ["Like actions"]
      operationId: unlikePhoto
      summary: Delete like
      description: |-
        Remove a like from a specific photo, is the photoId provided is correct then the like is removed. 
        If the photoId is not correct then an error response is given.
      responses:
        "200": {description: Like removed successfully.}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /comment/{photoId}:
    parameters:
      - $ref : "#/components/parameters/photoID" 
    #* commentPhoto
    post:
      security:
      - {} #nosec
      - bearerAuth : []
      tags: ["Comment actions"]
      summary: Add comment
      operationId: commentPhoto
      description: |-
       Add a comment under a Photo, if photoId is correct
       then the comment in the request body is added under the photo. If 
       the photoId is wrong then a response error is given.
      requestBody:
        description: Comment 
        content: 
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: Hello World!
                  minLength: 1
                  maxLength: 40
        required: true
      responses:
        "200":
          description:  Comment added successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/commentsList"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    #* getComments
    get:
      security:
      - {} #nosec
      - bearerAuth : []
      tags: ["Comment actions"]
      summary: Return photo comments
      description: |-
        Return a list of comments under a specific photo. If the photoId is correct the list is returned, an error message
        is returned if the Id is not corecct.
      operationId: getComments
      responses:
        "200": 
          description: Photo comments retrived successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/commentsList"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }  
  /comment/{commentId}:
    parameters:
      - $ref: "#/components/parameters/commentID"
    #* editComment
    put: 
      security:
      - {} #nosec
      - bearerAuth : []
      tags: ["Comment actions"]
      operationId: editComment
      summary: Edit comment
      description: |-
        Edit a published comment with a new comment content. If the commentId is correct then the comment
        is updated, an error response is given if the commentId is not correct.
      requestBody:
        description: User username
        content: 
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: "Nice World!"
                  minLength: 1
                  maxLength: 40
        required: true
      responses:
        "201":
          description: Comment updated successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/commentsList"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    #* uncommentPhoto
    delete:
     security:
     - {} #nosec
     - bearerAuth : []
     tags: ["Comment actions"]
     operationId: uncommentPhoto
     summary: Remove comment
     description: |-
       Delete a comment under a photo. If the commentId is correct then the comment is removed from the photo, an error response
       is given if the commentId is not correct.
     responses:
       "200": {description: Comment removed successfully.}
       "400": { $ref: "#/components/responses/BadRequest" }
       "401": { $ref: "#/components/responses/UnauthorizedError" }
       "500": { $ref: "#/components/responses/InternalServerError" }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  responses:
    #* UnauthorizedError response 
    UnauthorizedError:
      description: Access token is missing or invalid
    #* BadRequest response
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc).
    #* InternalServerError response
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs.
  schemas:
    #* user
    user:
      title: User 
      description: This object represent a single user.
      type: object
      properties:
        identifier:
          description: Unique user identifier.
          type: string
          readOnly: true
          example: "#U1234"
        username:
          description: User username.
          type: string
          example: LucianCrainic
        createDate:
          description: Registration date.
          type: string
          format: date-time
          readOnly: true
          example: "2022-11-02T09:00:00Z"
    #* followList schema
    followList:
      title: Followers
      description: This object represent the followers of a single user.
      type: object
      properties:
        identifier:
          description: Unique user identifier.
          type: string
          readOnly: true
          example: "#U1234"
        username:
          description: User username.
          type: string
          example: LucianCrainic
        followers: 
          description: list of objects (each object is a single user)
          type: array
          items:
            type: object
            properties:
              identifier:
                description: Unique user identifier.
                type: string
                readOnly: true
                example: "#U5678" 
    #* banList schema
    banList:
      title: Bans
      description: This object represent the bans of a single user.
      type: object
      properties:
        identifier:
          description: Unique user identifier.
          type: string
          readOnly: true
          example: "#U1234"
        username:
          description: User username.
          type: string
          example: LucianCrainic
        ban: 
          description: list of objects (each object is a single user)
          type: array
          items:
            type: object
            properties:
              identifier:
                description: Unique user identifier.
                type: string
                readOnly: true
                example: "#U5678" 
    #* commentsList schema
    commentsList: 
      title: Comments
      description: This object represent the comments under a single photo.
      type: object
      properties:
        photoId: 
          description:  Unique photo identifier.
          type: string
          readOnly: true
          example: "#P1234"
        comments: 
          description: list of objects (each object is a comment).
          type: array
          items:
            type: object
            properties:
              commentId:
                description: Unique comment identifier.
                type: string
                readOnly: true 
                example: "#C1234"
              identifier:
                description: Unique user identifier.
                type: string
                readOnly: true
                example: "#U5678" 
              content:
                description: Content of the comment.
                type: string
                example: "Hello World!"
                minLength: 2
                maxLength: 30
              uploadDate:
                description: Upload date of a specific comment.
                type: string
                example: "2022-11-02T09:00:00Z"
                readOnly: true
    #* likesList schema
    likesList: 
      title: Likes
      description: This object represent the likes to a single photo.
      type: object
      properties:
        photoId: 
          description:  Unique photo identifier.
          type: string
          readOnly: true
          example: "#P1234"
        likes: 
          description: list of objects (each object is a like)
          type: array
          items:
            type: object
            properties:
              identifier:
                description: Unique user identifier.
                type: string
                readOnly: true
                example: "#U1234"
    #* photoList schema
    photosList: 
      title: Photos
      description: This object represent the photos of a single user.
      type: object
      properties:
        identifier:
          description: Unique user identifier.
          type: string
          readOnly: true
          example: "#U1234" 
        photos: 
          description: list of objects (each object is a photo)
          type: array
          items:
            type: object
            properties:
              photoId: 
                description:  Unique photo identifier.
                type: string
                readOnly: true
                example: "#P1234"
              file: 
                  type: string
                  format: binary
                  readOnly: true
              uploadDate:
                description: Upload date of a specific photo.
                type: string
                readOnly: true
                example: "2022-11-02T09:00:00Z"
  parameters:
    #* username parameter
    username:
      schema:
          type: string
          example: LucianCrainic
          readOnly: true
          minLength: 5
          maxLength: 30
      name: username
      in: path
      required: true
      description: "**Username** of a WASAPhoto user."
    #* photoID parameter
    photoID:
      schema:
        type: string
        example: "#P1234"
        readOnly: true
      name: photoId 
      in: path
      required: true
      description: "**photoID** of a specific photo on a user profile."
    #* commentID parameter
    commentID:
      schema:
        type: string
        example: "#C1234"
        readOnly: true
      name: commentId
      in: path
      required: true
      description: "**commentID** of a single comment under a photo."
