openapi: 3.0.3
info:
  description: |-
    Each user will be presented with a stream of photos in reverse chronological order, with information
    about when it was uploaded (date and time) and how many likes and comments it has. Users can place
    (and later remove) a “like” to photos from other users. Also, users can add comments to any photo
    (even those uploaded by themself). Comments can be removed by the author only.

    Users can ban other users. If Alice (user) bans Eve (user), Eve won’t be able to see any information
    about Alice. Alice can decide to remove the ban at any moment.

    Users will have their own personal profiles. The personal profile page for user detail: user’s photos (in
    reverse chronological order), their followers and following, and how many photos have been uploaded.
    Each user can change his/her own username, upload photos, remove photos, and follow/unfollow
    other users. Removal of a photo will also remove likes and comments.

    Users profiles can be searched via username.

    The login is perfomed by specifying the username.
  title: WASAPhoto API
  version: 1.0.0
  contact:
    name: Lucian Dorin Crainic
    email: crainic.1938430@studenti.uniroma1.it
    url: https://github.com/LucianCrainic
  license:
    name: MIT
paths:
  /session/:
    #* doLogin
    post:
      tags: ["Login action"]
      summary: Log in user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content: 
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: string
                  example: Lucian
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user"}
  /setUsername/{userId}:
    parameters:
      - $ref : "#/components/parameters/userId"
    #* setMyUserName
    put: 
      tags: ["Session User actions"]
      summary: Set user username
      description: |-
        Set user username, if the user is logged in then the username is set with the username
        in the request body.
      operationId: setMyUserName
      requestBody:
        description: User username
        content: 
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Lucian Dorin Crainic
                  minLength: 5
                  maxLength: 30
        required: true
      responses:
        "201":
          description: Username set successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /stream/{userId}:
    parameters:
      - $ref : "#/components/parameters/userId"
    #* getMyStream
    get:
      tags: ["Session User actions"]
      summary: Return user stream
      description: |-
        Return a list of photos for the user stream.
        If the client specifies a range for when the photos were uploaded,
        the list will be sorted by date from that point and filtered.
        Optionally, the client can specify a custom quantity of photos to be displayed.
      operationId: getMyStream
      parameters:
        - name: range
          in: query
          description: |-
            Range for when the photos were uploaded.
            Default: Today
          schema:
            type: string
            enum: ["Today","Yesterday", "Last week"]
            example: "Today"
        - name: quantity
          in: query
          required: false
          description: |-
            Quantity of photos to be displayed. 
            Default: 10.
          schema:
            type: number
            format: float
            example: 15
            minimum: 1
            maximum: 50
      responses:
        "200": 
          description: List of photos.
          content:
            image/*:
              schema: 
                type: array
                items: { $ref: "#/components/schemas/photo"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profile/{username}: 
    #* getUserProfile
    get:
      tags: ["User actions"]
      summary: Return user profile
      operationId: getUserProfile
      parameters:
        - name: username
          in: query
          description: |-
            **username** of the user to return.
          schema:
            type: string
            example: "LucianCrainic"
          required: true
      description: |-
        Return the user profile of a userId provided by the current logged in userId. 
        If the userId exists then the profile of the user is returned. a user not found
        error is given if the userId does not exist.
      responses:
        "200": 
          description: User profile retrived.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /ban/{userId}:
    parameters: 
      - $ref: "#/components/parameters/userId"
    #* banUser
    put: 
      tags: ["User Ban actions"]
      summary: Ban user
      description: |-
       Ban an user, if the userId provided by the current logged in user exist. If the userId 
       does not exist then a user not found response is given.
      operationId: banUser
      responses:
        "200": 
          description: User banned successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    #* unbanUser
    delete: 
      tags: ["User Ban actions"]
      summary: Unban user
      description: |-
        Unban an user, if the userId provided by the current logged in user
         exist. If the userId does not exist then a user not found response is given.
      operationId: unbanUser

      responses:
       "200": {description: Ban removed successfully.}
       "400": { $ref: "#/components/responses/BadRequest" }
       "500": { $ref: "#/components/responses/InternalServerError" }
  /follow/{userId}:
    parameters: 
    - $ref: "#/components/parameters/userId"
    #* followUser
    put: 
      tags: ["User Follow actions"]
      summary: Follow user
      description: |-
        Folow an user, if the userId provided by the current logged in user exist. If the userId does not exist then a user not found response is given.
      operationId: followUser
      responses:
        "200": 
          description: User followed successfully.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/user"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    #* unfollowUser
    delete: 
      tags: ["User Follow actions"]
      summary: Unfollow user
      description: |-
       Unfollow an user, if the userId provided by the current logged in user exist. If the userId does not exist then a user not found response is given.
      operationId: unfollowUser
      responses:
       "200": {description: Follow removed successfully.}
       "400": { $ref: "#/components/responses/BadRequest" }
       "500": { $ref: "#/components/responses/InternalServerError" }
  /photo/:
    #* uploadPhoto
    post: 
      tags: ["Photo actions"]
      summary: Upload photo
      description: |-
        Upload a photo, if the photo has the right format then it is uploaded on the user profile. If the file
        format is not correct, then an error response is given.
      operationId: uploadPhoto
      requestBody:
        content:
          image/*:
            schema: { $ref: "#/components/schemas/photo" }
        required: true
      responses:
        "200":
          description: Photo uploaded successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/photo" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /photo/{photoId}:
    parameters:
      - $ref : "#/components/parameters/photoID"
    #* deletePhoto 
    delete:
      tags: ["Photo actions"]
      operationId: deletePhoto
      summary: Remove photo
      description: |-
       Delete a photo from a user profile. If the photoId is correct then the photo is removed, an 
       error response is given if the photoId is not found.
      responses:
        "200": {description: Photo deleted successfully.}
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /like/{photoId}:
    parameters:
      - $ref : "#/components/parameters/photoID"
    #* likePhoto
    put: 
      tags: ["Photo actions"]
      operationId: likePhoto
      summary: Like photo
      description: |-
        Add a like from a specific photo, is the photoid and the userid provided by the 
        current logged in user are correct then the like is added. If either one of the IDs
        are not correct then a photo not found error response is given.
      responses:
        "200":
          description: Like added successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/photo"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    #* unlikePhoto
    delete: 
      tags: ["Photo actions"]
      operationId: unlikePhoto
      summary: Delete like
      description: |-
        Remove a like from a specific photo, is the photoid and the userid provided by the 
        current logged in user are correct then the like is removed. If either one of the IDs
        are not correct then a photo not found error response is given.
      responses:
        "200": {description: Like removed successfully.}
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /comment/{photoId}:
    parameters:
      - $ref : "#/components/parameters/photoID"
    #* commentPhoto
    put:
      tags: ["Comment actions"]
      summary: Add comment
      operationId: commentPhoto
      description: |-
       Add a comment under a Photo, if the userID and photoID are correct
       then the comment in the request body is added under the photo. If 
       either one of the IDs are wrong then a photo not found response is given.
      requestBody:
        description: Comment 
        content: 
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: Hello World!
                  minLength: 1
                  maxLength: 16
        required: true
      responses:
        "200":
          description:  Comment added successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/comment"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /comment/{commentId}:
    parameters:
      - $ref: "#/components/parameters/commentID"
    #* uncommentPhoto
    delete:
     tags: ["Comment actions"]
     operationId: uncommentPhoto
     summary: Remove comment
     description: |-
       Delete a comment under a photo. If the userID,photoID and commentID 
       are correct then the photo is removed, if either  one of the 3 IDs are wrong 
       then a response error is given.
     responses:
       "200": {description: Comment removed successfully.}
       "400": { $ref: "#/components/responses/BadRequest" }
       "500": { $ref: "#/components/responses/InternalServerError" }

components:
  responses:
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc).
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs.
  schemas:
    #* User schema
    user:
      title: User Schema
      description: This object represent a single user.
      type: object
      properties:
        userId:
          description: Unique user identifier.
          type: string
          readOnly: true
          example: Lucian
        username:
          description: User username.
          type: string
          example: Lucian Dorin Crainic
        followList: 
          description: list of objects(each object is a followed user).
          type: array
          items:
            type: object
            properties:
              userId: 
                type: string
                example: "Marco" 
        banList: 
          description: list of objects(each object is a banned user).
          type: array
          items:
            type: object
            properties:
              userId: 
                type: string
                example: "Andrea"
        followersCount:
          description: Number of followers.
          type: integer
          minimum: 0
          maximum : 9999999
          readOnly: true
          example: 1420
        photoCount:
          description: Number of photos published.
          type: integer
          minimum: 0
          maximum : 9999999
          readOnly: true
          example: 80
        createDate:
          description: Registration date.
          type: string
          format: date-time
          readOnly: true
          example: "2022-11-02T09:00:00Z"
    #* Photo schema
    photo: 
      title: Photo Schema
      description: This object represent a single photo.
      type: object
      properties:
        photoId: 
          description:  Unique photo identifier.
          type: string
          readOnly: true
          example: "#P1234"
        likesCount:
          description: Number of likes.
          type: integer
          minimum: 0
          maximum : 9999999
          example: 15
        commentsCount:
          description: Number of comments.
          type: integer
          minimum: 0
          maximum : 9999999
          example: 20
        uploadDate:
          description: Upload date of a specific photo.
          type: string
          readOnly: true
          example: "2022-11-02T09:00:00Z"
    #* Comment Schema
    comment: 
      title: Comment Schema
      description: This object represent a single comment.
      type: object
      properties:
        commentId:
          description: Unique comment identifier.
          type: string
          readOnly: true 
          example: "#C1234"
        content:
          description: Content of the comment.
          type: string
          example: "Hello World!"
        uploadDate:
          description: Upload date of a specific comment.
          type: string
          example: "2022-11-02T09:00:00Z"
          readOnly: true
  parameters:
    userId:
      schema:
        type: string
        example: "#U1234"
        readOnly: true
      name: Id
      in: path
      required: true
      description: "**ID** of the current user that is logged in WASAPhoto."
    photoID:
      schema:
        type: string
        example: "#P1234"
        readOnly: true
      name: photoId 
      in: path
      required: true
      description: "**photoID** of a specific photo on a user profile."
    commentID:
      schema:
        type: string
        example: "#C1234"
        readOnly: true
      name: commentId
      in: path
      required: true
      description: "**commentID** of a single comment under a photo."