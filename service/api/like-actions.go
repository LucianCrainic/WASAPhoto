package api

import (
	"encoding/json"
	"errors"
	"net/http"
	"strconv"

	"git.sapienzaapps.it/fantasticcoffee/fantastic-coffee-decaffeinated/service/api/reqcontext"
	"git.sapienzaapps.it/fantasticcoffee/fantastic-coffee-decaffeinated/service/database"
	"github.com/julienschmidt/httprouter"
)

// likePhoto is a function that allows a user to like a photo, it takes the username,photo,likeid from the path and returns the like body in the response.
// It returns an error if the user is not found or if the photoid/likeid does not exists.
// Authorizations: the user that wants to follow another user must be logged in.
func (rt *_router) likePhoto(w http.ResponseWriter, r *http.Request, ps httprouter.Params, ctx reqcontext.RequestContext) {
	// struct for the like
	var like Like
	// struct for the user
	var user User

	// get the username of the user that owns the photo
	username := ps.ByName("username")
	dbuser, err := rt.db.GetUserId(username)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	// decode the user from the database
	user.FromDatabase(dbuser)

	// get the photoid from the url
	photoid, err := strconv.ParseUint(ps.ByName("photoid"), 10, 64)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// get the likeid from the url (it is generated by the frontend)
	likeid, err := strconv.ParseUint(ps.ByName("likeid"), 10, 64)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// set the like id to the id from the url
	like.LikeId = likeid
	// get the token identifier from the authorization header
	token := getToken(r.Header.Get("Authorization"))
	// set the user id to the id of the user that created the like
	like.UserIdentifier = token
	// set the photo id to the id from the url
	like.PhotoIdentifier = photoid
	// set the user id to the id of the user that owns the photo
	like.PhotoOwner = user.Id

	// create the like in the database
	dblike, err := rt.db.SetLike(like.LikeToDatabase())
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	// decode the like from the database
	like.LikeFromDatabase(dblike)

	// return the like
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	_ = json.NewEncoder(w).Encode(like)
}

// unlikePhoto is a function that allows a user to remove a like from a picture, it takes the username,photoid,likeid from the path and returns a response if the like is removed from the database.
// It returns an error if the user is not found or if the  photoid/likeid does not exists.
// Authorizations: the user that wants to remove the follow must be logged in.
func (rt *_router) unlikePhoto(w http.ResponseWriter, r *http.Request, ps httprouter.Params, ctx reqcontext.RequestContext) {
	// struct for the user
	var user User
	// struct for the like
	var like Like

	// get the username from the url
	username := ps.ByName("username")
	// check if the user is an existing one
	dbuser, err := rt.db.GetUserId(username)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	user.FromDatabase(dbuser)

	// get the photo id from the url
	photoid, err := strconv.ParseUint(ps.ByName("photoid"), 10, 64)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// get the like id from the url
	likeid, err := strconv.ParseUint(ps.ByName("likeid"), 10, 64)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	// set the like id to the id from the url
	like.LikeId = likeid
	// get the token from the header
	token := getToken(r.Header.Get("Authorization"))
	// set the user id to the id of the user that created the like
	like.UserIdentifier = token
	// set the photo id to the id from the url
	like.PhotoIdentifier = photoid
	// set the user id to the id of the user that owns the photo
	like.PhotoOwner = user.Id

	// remove the like from the database
	err = rt.db.RemoveLike(like.LikeToDatabase())
	if errors.Is(err, database.ErrLikeDoesNotExist) {
		http.Error(w, err.Error(), http.StatusNotFound)
		return
	} else if err != nil {
		ctx.Logger.WithError(err).WithField("id", likeid).Error("can't delete the like")
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	// set the header
	w.WriteHeader(http.StatusNoContent)
}

// getLikes is a function that allows a user to get all likes from a picture, it takes the username,photoid from the path and returns a likelist body
// It returns an error if the user is not found or if the  photoid does not exists.
// Authorizations: the user that wants to remove the follow must be logged in.
func (rt *_router) getLikes(w http.ResponseWriter, r *http.Request, ps httprouter.Params, ctx reqcontext.RequestContext) {
	// struct for the user
	var user User
	// struct for the photo
	var photo Photo
	// struct for the request user
	var requestUser User
	// struct for the likeList
	//var like Like

	// create user structure for the user that wants to get the bans
	token := getToken(r.Header.Get("Authorization"))
	// set the token to the request user
	requestUser.Id = token
	// check if the request user does exist
	dbrequestuser, err := rt.db.CheckUserById(requestUser.ToDatabase())
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	// decode the user from the database
	requestUser.FromDatabase(dbrequestuser)

	// get the username from the url
	username := ps.ByName("username")
	// check if the user is an existing one
	dbuser, err := rt.db.GetUserId(username)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	// decode the user from the database
	user.FromDatabase(dbuser)

	// get the photo id from the url
	photoid, err := strconv.ParseUint(ps.ByName("photoid"), 10, 64)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// check if the photo is an existing one
	photo.Id = photoid
	dbphoto, err := rt.db.CheckPhoto(photo.PhotoToDatabase())
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	// decode the photo from the database
	photo.PhotoFromDatabase(dbphoto)

	// get the likes from the db
	like, err := rt.db.GetLike(photo.Id, token)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// set the header and return the likeList
	w.Header().Set("Content-Type", "application/json")
	_ = json.NewEncoder(w).Encode(like)
}
